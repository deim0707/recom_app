{"version":3,"sources":["store/actions.js","components/welcome-page/welcomePage.js","components/welcome-page/index.js","components/questions/questions.js","components/questions/index.js","components/result/result.js","components/result/index.js","App.js","store/initialState.js","store/reducers.js","store/store.js","index.js"],"names":["changeShowDisplay","nameDisplay","type","payload","WelcomePage","changeQuestion","props","console","log","showedDisplay","className","Jumbotron","Button","variant","onClick","this","Component","mapDispatchToProps","connect","state","showDisplay","Questions","qtQuestions","questions","length","numberOfQuestion","activeQuestion","questionText","question_text","answer1","answer","answer2","answer3","progress","Math","trunc","Col","sm","key","uniqid","ProgressBar","now","Tab","Container","id","defaultActiveKey","Row","ListGroup","Item","action","href","prewActiveQuestion","nextActiveQuestion","changeTechnology","technology","value","Result","startTestAgain","changeActiveQuestion","bem","adaptive","struct","App","showed","initialState","reducer","update","$set","nameTechnology","alert","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d4260e0.chunk.js","sourcesContent":["//change showed display\r\nexport let changeShowDisplay = (nameDisplay) => ({\r\n    type: 'CHANGE_DISPLAY',\r\n    payload: {\r\n        nameDisplay\r\n    }\r\n});\r\n//change technology\r\nexport let changeTechnology = (technology, value) => ({\r\n    type: 'CHANGE_TECHNOLOGY',\r\n    payload: {\r\n        technology,\r\n        value\r\n    }\r\n});\r\n//change Active Question\r\nexport let nextActiveQuestion = () => ({\r\n    type: 'NEXT_ACTIVE_QUESTION',\r\n});\r\n\r\nexport let prewActiveQuestion = () => ({\r\n    type: 'PREW_ACTIVE_QUESTION',\r\n});\r\nexport let changeActiveQuestion = (value) => ({\r\n    type: 'CHANGE_ACTIVE_QUESTION',\r\n    payload: {\r\n        value\r\n    }\r\n});\r\n\r\n","import React, { Component } from 'react';\r\nimport './welcomePage.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  {Jumbotron, Button} from  'react-bootstrap'\r\nimport {connect} from 'react-redux';\r\nimport {changeShowDisplay} from '../../store/actions';\r\n\r\n\r\nclass WelcomePage extends Component {\r\n\r\n    changeQuestion=()=> {\r\n        this.props.changeShowDisplay('questions');\r\n        console.log(`с приветсивия перешли на ${this.props.showedDisplay}`);\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div className='welcomePage  d-flex justify-content-center vh-100 flex-column '>\r\n                <Jumbotron className='col-6 col-md-12 welcomePage--content'>\r\n                    <h1>Добро пожаловать!</h1>\r\n                    <p>\r\n                        Перед вами рекомендательная система, которая поможет определиться в выборе некоторых технологий используемых для создания адаптивного веб-сайта. <br/>\r\n                        Впереди вас ждёт ряд вопросов, отвечая на которые вы определяете выбор технологий.<br/>\r\n                        Нажав кнопку \"Вперёд\" вы начнёте тестирование.<br/>\r\n                        Нажав на кнопку \"Назад\" вернётесь к предыдущему вопросу. <br/>\r\n                    </p>\r\n                    <p>\r\n                        <Button variant=\"success\" onClick={this.changeQuestion}>Вперёд</Button>\r\n                    </p>\r\n                </Jumbotron>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        showedDisplay: state.showDisplay,\r\n\r\n    }\r\n};\r\nconst mapDispatchToProps = {\r\n    changeShowDisplay\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (WelcomePage);","import WelcomePage from './welcomePage.js';\r\n\r\nexport default WelcomePage;\r\n","import React, { Component } from 'react';\r\nimport uniqid from 'uniqid';\r\nimport './questions.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  {ListGroup, Row, Col, Tab, ProgressBar, Button} from  'react-bootstrap'\r\n\r\nimport {connect} from 'react-redux';\r\nimport {changeShowDisplay, changeTechnology, nextActiveQuestion, prewActiveQuestion} from '../../store/actions';\r\n\r\n\r\n\r\nclass Questions extends Component {\r\n\r\n\r\n\r\n    render(){\r\n        const c = console.log;\r\n\r\n        // c(`bem: ${this.props.technology.bem}`);\r\n        // this.props.changeTechnology('bem', 221);\r\n        //ТУТ НАДО ПОМЕНЯТЬ ЗНАЧЕНИЕ В СТЕЙТЕ У ТЕХНОЛОГИЯХ. ПРИ ВЫБОРЕ ОПРЕДЕЛЁННОГО ОТВЕТА\r\n        const nextQuestion = () => {\r\n            this.props.nextActiveQuestion();\r\n        };\r\n\r\n        let qtQuestions = this.props.questions.length;\r\n        let numberOfQuestion=this.props.activeQuestion;\r\n        let questionText = this.props.questions[numberOfQuestion-1].question_text;\r\n        let answer1=this.props.questions[numberOfQuestion-1].answer[0];\r\n        let answer2=this.props.questions[numberOfQuestion-1].answer[1];\r\n        let answer3=this.props.questions[numberOfQuestion-1].answer[2];\r\n        let progress=Math.trunc(((numberOfQuestion/qtQuestions)*100));\r\n\r\n\r\n        //смена экрана по окончании теста\r\n        if (numberOfQuestion>=qtQuestions) {\r\n            console.log(`с вопросов перешли на ${this.props.showedDisplay}`);\r\n            this.props.changeShowDisplay('result');\r\n        }\r\n\r\n        return (\r\n            <div className='questions'>\r\n                <Col sm={8} className=\"d-flex justify-content-center vh-100 flex-column questions--content\">\r\n                    <h2>Вопрос №{numberOfQuestion} из {qtQuestions}</h2>\r\n                    <p key={uniqid()}>\r\n                        {questionText}\r\n                    </p>\r\n\r\n                    <ProgressBar now={progress} className='questions--progress-bar mb-1'/>\r\n\r\n                    <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#\">\r\n                        <Row>\r\n                            <Col sm={12} className=''>\r\n                                <ListGroup>\r\n                                    <ListGroup.Item action href=\"#link1\" key={uniqid()}>\r\n                                        {answer1}\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item action href=\"#link2\" key={uniqid()}>\r\n                                        {answer2}\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item action href=\"#link3\" key={uniqid()}>\r\n                                        {answer3}\r\n                                    </ListGroup.Item>\r\n                                </ListGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </Tab.Container>\r\n\r\n                    <div className=\"questions--buttons mt-2 d-flex justify-content-around align-content-center\">\r\n                        <Button variant=\"primary w-25\" onClick={this.props.prewActiveQuestion}>Назад</Button>\r\n                        <Button variant=\"primary w-25\" onClick={nextQuestion}>Вперёд</Button>\r\n                    </div>\r\n\r\n                </Col>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        technology: state.technology,\r\n        questions: state.questions,\r\n        activeQuestion: state.activeQuestion,\r\n        showedDisplay: state.showDisplay\r\n    }\r\n};\r\nconst mapDispatchToProps = {\r\n    changeTechnology, nextActiveQuestion, prewActiveQuestion, changeShowDisplay\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Questions);","import Questions from './questions.js';\r\n\r\nexport default Questions;\r\n","import React, { Component } from 'react';\r\nimport './result.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  {ListGroup, Button} from  'react-bootstrap'\r\nimport {connect} from 'react-redux';\r\nimport {changeShowDisplay, changeActiveQuestion} from '../../store/actions';\r\n\r\n\r\n\r\nclass Result extends Component {\r\n    startTestAgain= () => {\r\n        this.props.changeActiveQuestion(1);\r\n        this.props.changeShowDisplay('questions');\r\n        console.log(`с результатов перешли на ${this.props.showedDisplay}`);\r\n    };\r\n\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className='result col-8'>\r\n                <h3>Ваши результаты</h3>\r\n                <p className='mt-2'>\r\n                    Ниже представлена информация с результатами прохождения теста. <br/>\r\n                    Чем больше число напротив технологии, тем больше она вам подходит.\r\n                </p>\r\n                <ListGroup variant=\"flush\">\r\n                    <ListGroup.Item>\r\n                        БЭМ:    &nbsp;\r\n                        <span>\r\n                            {this.props.technology.bem}\r\n                        </span>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        Адаптив:  &nbsp;\r\n                        <span>\r\n                            {this.props.technology.adaptive}\r\n                        </span>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        Что-то ещё:  &nbsp;\r\n                        <span>\r\n                            {this.props.technology.struct}\r\n                        </span>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n\r\n                <Button variant=\"success\" onClick={this.startTestAgain}>Пройти тест заново</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        technology: state.technology,\r\n        showedDisplay: state.showDisplay,\r\n    }\r\n};\r\nconst mapDispatchToProps = {\r\n    changeShowDisplay, changeActiveQuestion\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Result);","import Result from './result.js';\r\n\r\nexport default Result;\r\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport {connect} from 'react-redux';\n\nimport WelcomePage from \"./components/welcome-page\";\nimport Questions from \"./components/questions\";\nimport Result from \"./components/result\";\n\nclass App extends Component {\n\n    render() {\n\n        let showed;\n\n        console.log(`показывается дисплей ${this.props.showedDisplay}`);\n\n        //выбор отображаемого экрана\n        switch (this.props.showedDisplay) {\n            case 'welcome': {\n                return <WelcomePage/>\n            }\n            case 'questions': {\n                return <Questions/>\n            }\n            case 'result': {\n                return <Result/>\n            }\n            default: {\n                return <Questions/>\n            }\n\n        }\n\n        return (\n            <div className=\"App\">\n                {showed}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        showedDisplay: state.showDisplay,\n    }\n};\n\n\nexport default connect(mapStateToProps) (App);","\r\nconst initialState = {\r\n    activeQuestion: 1,\r\n    showDisplay: 'welcome',\r\n\r\n    questions: [\r\n         {\r\n            question_text: '1Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus accusantium, ad aliquid aperiam architecto consequatur corporis culpa cupiditate dignissimos distinctio dolor eos error exercitationem hic in ipsam iusto labore maxime minus neque nesciunt nisi nulla odio optio possimus quas, quibusdam quos recusandae rem soluta temporibus vel velit veniam voluptas voluptatem.',\r\n            answer: [\r\n                'bem1',\r\n                'adaptive1',\r\n                'struct1'\r\n            ]\r\n        },\r\n         {\r\n            question_text: '2Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam aut beatae commodi doloribus explicabo optio quia ratione repellat tempore voluptate.',\r\n            answer: [\r\n                'bem2',\r\n                'adaptive2',\r\n                'struct2'\r\n            ]\r\n         },\r\n        {\r\n            question_text: '3Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam aut beatae commodi doloribus explicabo optio quia ratione repellat tempore voluptate.',\r\n            answer: [\r\n                'bem3',\r\n                'adaptive3',\r\n                'struct3'\r\n            ]\r\n        }\r\n    ],\r\n\r\n    technology: {\r\n        bem: 11,\r\n        adaptive: 2,\r\n        struct: 0\r\n    }\r\n\r\n};\r\n\r\nexport default initialState;","import initialState from './initialState';\r\nimport update from 'immutability-helper';\r\n\r\n\r\nlet reducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE_DISPLAY': {\r\n            return update(state, {\r\n                showDisplay: {\r\n                    $set: action.payload.nameDisplay\r\n                }\r\n            })\r\n        }\r\n\r\n        case 'CHANGE_TECHNOLOGY': {\r\n            let nameTechnology = action.payload.technology;\r\n            let value= action.payload.value;\r\n            return update(state, {\r\n                technology: {\r\n                    [nameTechnology]: {\r\n                        $set: value\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        case 'NEXT_ACTIVE_QUESTION': {\r\n            let nameTechnology = ++initialState.activeQuestion;\r\n            console.log(`Номер вопроса: ${nameTechnology}`);\r\n\r\n            //срабатывает при достижении конца массива вопросов\r\n            if (initialState.activeQuestion> initialState.questions.length) {\r\n                console.log('aaaaaaaaaaaaaaaa')\r\n            }\r\n\r\n            return update(state, {\r\n                activeQuestion: {\r\n                    $set: nameTechnology\r\n                }\r\n            })\r\n        }\r\n\r\n        case 'PREW_ACTIVE_QUESTION': {\r\n            let nameTechnology;\r\n            //проверка на то, чтобы номера вопросов не ушли в минус\r\n            if (initialState.activeQuestion<=1) {\r\n                nameTechnology=1;\r\n                alert(\"Вы уже на первом вопросе :)\")\r\n            }\r\n            if (initialState.activeQuestion>1) {\r\n                nameTechnology= --initialState.activeQuestion;\r\n            }\r\n            console.log(`Номер вопроса: ${nameTechnology}`);\r\n\r\n            return update(state, {\r\n                activeQuestion: {\r\n                    $set: nameTechnology\r\n                }\r\n            })\r\n        }\r\n\r\n        case 'CHANGE_ACTIVE_QUESTION': {\r\n            return update(state, {\r\n                activeQuestion: {\r\n                    $set: action.payload.value\r\n                }\r\n            })\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport  default reducer;","import {createStore} from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {Provider} from 'react-redux';\nimport store from './store/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}