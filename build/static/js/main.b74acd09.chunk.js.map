{"version":3,"sources":["store/actions.js","components/welcome-page/welcomePage.js","components/welcome-page/index.js","components/questions/questions.js","components/questions/index.js","components/result/result.js","components/result/index.js","App.js","store/initialState.js","store/reducers.js","store/store.js","index.js"],"names":["changeShowDisplay","nameDisplay","type","payload","WelcomePage","changeQuestion","props","console","log","showedDisplay","className","Jumbotron","Button","variant","onClick","this","Component","mapDispatchToProps","connect","state","showDisplay","Questions","qtQuestions","questions","length","numberOfQuestion","activeQuestion","questionText","question_text","answer1","answers","answer2","answer3","nextButtonDisable","buttonsDisabled","next","progress","prew","Math","trunc","makeStyleSelectedAnswer","answer","selectedAnswer","numberOfAnswer","zIndex","color","backgroundColor","borderColor","doSelectAnswer","changeBtnDisabled","changeTechonology","thisIncrement","nameTechnology","oldValue","technology","newValue","price","changeTechnology","Col","sm","key","uniqid","ProgressBar","now","Tab","Container","id","defaultActiveKey","Row","ListGroup","Item","action","style","text","disabled","lastSelectedAnswer","prewActiveQuestion","nextActiveQuestion","value","typeBtn","status","Result","startTestAgain","changeActiveQuestion","px","em","rem","App","initialState","reducer","update","$set","numberQuestion","Object","assign","alert","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b74acd09.chunk.js","sourcesContent":["//change showed display\r\nexport let changeShowDisplay = (nameDisplay) => ({\r\n    type: 'CHANGE_DISPLAY',\r\n    payload: {\r\n        nameDisplay\r\n    }\r\n});\r\n//change technology\r\nexport let changeTechnology = (technology, value) => ({\r\n    type: 'CHANGE_TECHNOLOGY',\r\n    payload: {\r\n        technology,\r\n        value\r\n    }\r\n});\r\n//change Active Question\r\nexport let nextActiveQuestion = () => ({\r\n    type: 'NEXT_ACTIVE_QUESTION',\r\n});\r\n\r\nexport let prewActiveQuestion = () => ({\r\n    type: 'PREW_ACTIVE_QUESTION',\r\n});\r\nexport let changeActiveQuestion = (value) => ({\r\n    type: 'CHANGE_ACTIVE_QUESTION',\r\n    payload: {\r\n        value\r\n    }\r\n});\r\nexport let changeBtnDisabled = (typeBtn, status) => ({\r\n    type: 'CHANGE_BTN_DISABLED',\r\n    payload: {\r\n        typeBtn,\r\n        status\r\n    }\r\n});\r\n","import React, { Component } from 'react';\r\nimport './welcomePage.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  {Jumbotron, Button} from  'react-bootstrap'\r\nimport {connect} from 'react-redux';\r\nimport {changeShowDisplay} from '../../store/actions';\r\n\r\n\r\nclass WelcomePage extends Component {\r\n\r\n    changeQuestion=()=> {\r\n        this.props.changeShowDisplay('questions');\r\n        console.log(`с приветсивия перешли на ${this.props.showedDisplay}`);\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div className='welcomePage'>\r\n                <Jumbotron className='welcomePage--content d-flex justify-content-center flex-column vh-100'>\r\n                    <h1>Добро пожаловать!</h1>\r\n                    <p>\r\n                        Перед вами рекомендательная система, которая поможет определиться в выборе некоторых технологий используемых для создания адаптивного веб-сайта. <br/>\r\n                        Впереди вас ждёт ряд вопросов, отвечая на которые вы определяете выбор технологий.<br/>\r\n                        Нажав кнопку \"Вперёд\" вы начнёте тестирование.<br/>\r\n                        Нажав на кнопку \"Назад\" вернётесь к предыдущему вопросу. <br/>\r\n                    </p>\r\n                    <p className='d-flex justify-content-start'>\r\n                        <Button variant=\"success w-25\" onClick={this.changeQuestion}>Старт</Button>\r\n                    </p>\r\n                </Jumbotron>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        showedDisplay: state.showDisplay,\r\n\r\n    }\r\n};\r\nconst mapDispatchToProps = {\r\n    changeShowDisplay\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (WelcomePage);","import WelcomePage from './welcomePage.js';\r\n\r\nexport default WelcomePage;\r\n","import React, {Component} from 'react';\r\nimport uniqid from 'uniqid';\r\nimport './questions.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {ListGroup, Row, Col, Tab, ProgressBar, Button} from 'react-bootstrap'\r\n\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    changeShowDisplay,\r\n    changeTechnology,\r\n    nextActiveQuestion,\r\n    prewActiveQuestion,\r\n    changeBtnDisabled\r\n} from '../../store/actions';\r\n\r\n\r\nclass Questions extends Component {\r\n\r\n    selectedAnswer; //выбранный ответ\r\n    lastSelectedAnswer; //послей занесённый в стор ответ. используется для удаления значения, при нажатии кнопки Назад\r\n\r\n    render() {\r\n        const c = console.log;\r\n\r\n\r\n        const qtQuestions = this.props.questions.length;\r\n        const numberOfQuestion = this.props.activeQuestion;\r\n        const questionText = this.props.questions[numberOfQuestion - 1].question_text;\r\n        const answer1 = this.props.questions[numberOfQuestion - 1].answers[0];\r\n        const answer2 = this.props.questions[numberOfQuestion - 1].answers[1];\r\n        const answer3 = this.props.questions[numberOfQuestion - 1].answers[2];\r\n        const nextButtonDisable = this.props.buttonsDisabled.next; //возьмут из стейта, блокировать ли кнопки переключения вопросов\r\n        const prewButtonDisable = this.props.buttonsDisabled.prew; //возьмут из стейта, блокировать ли кнопки переключения вопросов\r\n        const progress = Math.trunc((((numberOfQuestion-1) / qtQuestions) * 100));\r\n\r\n        const makeStyleSelectedAnswer = (answer) => {\r\n            const style = {\r\n                zIndex: '2',\r\n                color: '#fff',\r\n                backgroundColor: '#007bff',\r\n                borderColor: '#007bff',\r\n            };\r\n\r\n            return this.selectedAnswer && this.selectedAnswer.numberOfAnswer === answer.numberOfAnswer ? style : null\r\n        };\r\n\r\n        //выбор ответа\r\n        const doSelectAnswer = (answer) => {\r\n            this.props.changeBtnDisabled('next', false);\r\n            this.selectedAnswer = answer;\r\n        };\r\n\r\n        const changeTechonology = (answer, thisIncrement) => {\r\n            const nameTechnology = answer.nameTechnology;\r\n            const oldValue = this.props.technology[nameTechnology];\r\n            const newValue = thisIncrement ? oldValue + answer.price : oldValue - answer.price;\r\n\r\n            this.props.changeTechnology(\r\n                nameTechnology,\r\n                newValue\r\n            );\r\n        };\r\n\r\n        const nextQuestion = (answer) => {\r\n            changeTechonology(answer, true);\r\n            this.lastSelectedAnswer=answer;\r\n            this.selectedAnswer=null;\r\n            //переключаем на следующий вопрос и блокируем кнопку\r\n            if (numberOfQuestion < qtQuestions) {\r\n                this.props.changeBtnDisabled('next', true);\r\n                this.props.nextActiveQuestion();\r\n            }\r\n            //смена экрана по окончании теста. кнопка Вперёд меняет функционал на Смену дисплея\r\n            if (numberOfQuestion >= qtQuestions) this.props.changeShowDisplay('result');\r\n        };\r\n\r\n        const prewQuestion = (answer) => {\r\n            this.props.prewActiveQuestion();\r\n            changeTechonology(answer, false);\r\n        };\r\n\r\n        return (\r\n            <div className='questions'>\r\n                <Col sm={8} className=\"d-flex justify-content-center vh-100 flex-column questions--content\">\r\n\r\n                    <h2>Вопрос №{numberOfQuestion} из {qtQuestions}</h2>\r\n\r\n                    <p key={uniqid()}>\r\n                        {questionText}\r\n                    </p>\r\n\r\n                    <ProgressBar now={progress} className='questions--progress-bar mb-1'/>\r\n\r\n                    <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#\">\r\n                        <Row>\r\n                            <Col sm={12} className=''>\r\n                                <ListGroup>\r\n                                    <ListGroup.Item action\r\n                                                    key={uniqid()}\r\n                                                    style={makeStyleSelectedAnswer(answer1)}\r\n                                                    onClick={() => doSelectAnswer(answer1)}>\r\n                                        {answer1.text}\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item action\r\n                                                    key={uniqid()}\r\n                                                    style={makeStyleSelectedAnswer(answer2)}\r\n                                                    onClick={() => doSelectAnswer(answer2)}>\r\n                                        {answer2.text}\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item action\r\n                                                    key={uniqid()}\r\n                                                    style={makeStyleSelectedAnswer(answer3)}\r\n                                                    onClick={() => doSelectAnswer(answer3)}>\r\n                                        {answer3.text}\r\n                                    </ListGroup.Item>\r\n                                </ListGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </Tab.Container>\r\n\r\n                    <div className=\"questions--buttons mt-2 d-flex justify-content-around align-content-center\">\r\n                        <Button variant=\"primary w-25\" id='btnPrew'\r\n                                // className={numberOfQuestion === 1 ? 'hide' : ''}\r\n                                disabled={numberOfQuestion === 1}\r\n                                onClick={() => prewQuestion(this.lastSelectedAnswer)}>\r\n                            Назад\r\n                        </Button>\r\n                        <Button variant=\"primary w-25\" id='btnNext'\r\n                                disabled={nextButtonDisable}\r\n                                onClick={() => nextQuestion(this.selectedAnswer)}>\r\n                            Вперёд\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Col>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        technology: state.technology,\r\n        questions: state.questions,\r\n        activeQuestion: state.activeQuestion,\r\n        showedDisplay: state.showDisplay,\r\n        buttonsDisabled: state.buttonsDisabled\r\n    }\r\n};\r\nconst mapDispatchToProps = {\r\n    changeTechnology, nextActiveQuestion, prewActiveQuestion, changeShowDisplay, changeBtnDisabled\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","import Questions from './questions.js';\r\n\r\nexport default Questions;\r\n","import React, { Component } from 'react';\r\nimport './result.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  {ListGroup, Button} from  'react-bootstrap'\r\nimport {connect} from 'react-redux';\r\nimport {changeShowDisplay, changeActiveQuestion} from '../../store/actions';\r\n\r\n\r\n\r\nclass Result extends Component {\r\n    startTestAgain= () => {\r\n        this.props.changeActiveQuestion(1);\r\n        this.props.changeShowDisplay('questions');\r\n        console.log(`с результатов перешли на ${this.props.showedDisplay}`);\r\n    };\r\n\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className='result col-8'>\r\n                <h3>Ваши результаты</h3>\r\n                <p className='mt-2'>\r\n                    Ниже представлена информация с результатами прохождения теста. <br/>\r\n                    Чем больше число напротив технологии, тем больше она вам подходит.\r\n                </p>\r\n                <ListGroup variant=\"flush\">\r\n                    <ListGroup.Item>\r\n                        PX:    &nbsp;\r\n                        <span>\r\n                            {this.props.technology.px}\r\n                        </span>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        EM:  &nbsp;\r\n                        <span>\r\n                            {this.props.technology.em}\r\n                        </span>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        REM:  &nbsp;\r\n                        <span>\r\n                            {this.props.technology.rem}\r\n                        </span>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n\r\n                {/*<Button variant=\"success\" onClick={this.startTestAgain}>Пройти тест заново</Button>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        technology: state.technology,\r\n        showedDisplay: state.showDisplay,\r\n    }\r\n};\r\nconst mapDispatchToProps = {\r\n    changeShowDisplay, changeActiveQuestion\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Result);","import Result from './result.js';\r\n\r\nexport default Result;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport WelcomePage from \"./components/welcome-page\";\r\nimport Questions from \"./components/questions\";\r\nimport Result from \"./components/result\";\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n\r\n        // let showed;\r\n\r\n        // console.log(`показывается дисплей ${this.props.showedDisplay}`);\r\n\r\n        //выбор отображаемого экрана\r\n        switch (this.props.showedDisplay) {\r\n            case 'welcome': {\r\n                return <WelcomePage/>\r\n            }\r\n            case 'questions': {\r\n                return <Questions/>\r\n            }\r\n            case 'result': {\r\n                return <Result/>\r\n            }\r\n            default: {\r\n                return <Questions/>\r\n            }\r\n\r\n        }\r\n\r\n        // return (\r\n        //     <div className=\"App\">\r\n        //         {showed}\r\n        //     </div>\r\n        // );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        showedDisplay: state.showDisplay,\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps) (App);","const initialState = {\r\n    activeQuestion: 1,\r\n    showDisplay: 'welcome',\r\n    buttonsDisabled: {\r\n        next: true,\r\n        prew: false\r\n    },\r\n\r\n    questions: [\r\n        {\r\n            question_text: 'Как вы предпочитаете указывать размеры элеметов?',\r\n            answers: [\r\n                {\r\n                    numberOfAnswer: 1,\r\n                    text: 'Лучше указать фиксированно, а потом переопределить в медиа-запросе.',\r\n                    nameTechnology: 'px',\r\n                    price: 1\r\n                },\r\n                {\r\n                    numberOfAnswer: 2,\r\n                    text: 'Относительно шрифта заданного <html>.',\r\n                    nameTechnology: 'em',\r\n                    price: 1\r\n                },\r\n                {\r\n                    numberOfAnswer: 3,\r\n                    text: 'Относительно ширины блока.',\r\n                    nameTechnology: 'rem',\r\n                    price: 1\r\n                }\r\n            ]\r\n        },\r\n\r\n        {\r\n            question_text: 'Как вы предпочитаете указывать размеры элеметов?',\r\n            answers: [\r\n                {\r\n                    numberOfAnswer: 1,\r\n                    text: 'b1',\r\n                    nameTechnology: 'px',\r\n                    price: 1\r\n                },\r\n                {\r\n                    numberOfAnswer: 2,\r\n                    text: 'b2',\r\n                    nameTechnology: 'em',\r\n                    price: 1\r\n                },\r\n                {\r\n                    numberOfAnswer: 3,\r\n                    text: 'b3',\r\n                    nameTechnology: 'rem',\r\n                    price: 1\r\n                }\r\n            ]\r\n        },\r\n\r\n        {\r\n            question_text: 'Как вы предпочитаете указывать размеры элеметов?',\r\n            answers: [\r\n                {\r\n                    numberOfAnswer: 1,\r\n                    text: 'c1',\r\n                    nameTechnology: 'px',\r\n                    price: 1\r\n                },\r\n                {\r\n                    numberOfAnswer: 2,\r\n                    text: 'c2',\r\n                    nameTechnology: 'em',\r\n                    price: 1\r\n                },\r\n                {\r\n                    numberOfAnswer: 3,\r\n                    text: 'c3',\r\n                    nameTechnology: 'rem',\r\n                    price: 1\r\n                }\r\n            ]\r\n        },\r\n    ],\r\n\r\n    technology: {\r\n        px: 1,\r\n        em: 2,\r\n        rem: 3\r\n    }\r\n\r\n};\r\n\r\nexport default initialState;","import initialState from './initialState';\r\nimport update from 'immutability-helper';\r\n\r\n\r\nlet reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE_DISPLAY': {\r\n            return update(state, {\r\n                showDisplay: {\r\n                    $set: action.payload.nameDisplay\r\n                }\r\n            })\r\n        }\r\n\r\n        case 'CHANGE_TECHNOLOGY': {\r\n            const nameTechnology = action.payload.technology;\r\n            const value = action.payload.value;\r\n\r\n            return update(state, {\r\n                technology: {\r\n                    [nameTechnology]: {\r\n                        $set: value\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        case 'NEXT_ACTIVE_QUESTION': {\r\n            let numberQuestion = ++initialState.activeQuestion;\r\n            if (numberQuestion >= state.questions.length) {\r\n                numberQuestion = state.questions.length;\r\n            }\r\n            // console.log(`Номер вопроса: ${initialState.activeQuestion}`);\r\n            //срабатывает при достижении конца массива вопросов\r\n            if (initialState.activeQuestion > initialState.questions.length) {\r\n                console.log('aaaaaaaaaaaaaaaa')\r\n            }\r\n            return Object.assign({}, state, {\r\n                activeQuestion: numberQuestion,\r\n            })\r\n        }\r\n\r\n        case 'PREW_ACTIVE_QUESTION': {\r\n            let nameTechnology;\r\n            //проверка на то, чтобы номера вопросов не ушли в минус\r\n            if (initialState.activeQuestion <= 1) {\r\n                nameTechnology = 1;\r\n                alert(\"Вы уже на первом вопросе. И нашли пасхалку :)\");\r\n            }\r\n            if (initialState.activeQuestion > 1) {\r\n                nameTechnology = --initialState.activeQuestion;\r\n            }\r\n            console.log(`Номер вопроса: ${nameTechnology}`);\r\n\r\n            return update(state, {\r\n                activeQuestion: {\r\n                    $set: nameTechnology\r\n                }\r\n            })\r\n        }\r\n\r\n        case 'CHANGE_ACTIVE_QUESTION': {\r\n            return update(state, {\r\n                activeQuestion: {\r\n                    $set: action.payload.value\r\n                }\r\n            })\r\n        }\r\n\r\n        case 'CHANGE_BTN_DISABLED': {\r\n            const status = action.payload.status;\r\n            const typeBtn = action.payload.typeBtn;\r\n            // console.log(`CHANGE_BTN_DISABLED сработал. Результат: ${initialState.buttonsDisabled.next}`);\r\n\r\n            return Object.assign(\r\n                {},\r\n                state,\r\n                {\r\n                    buttonsDisabled: Object.assign(\r\n                        {},\r\n                        state.buttonsDisabled,\r\n                        {[typeBtn]: status}\r\n                    )\r\n                }\r\n            )\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;","import {createStore} from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport store from './store/store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}